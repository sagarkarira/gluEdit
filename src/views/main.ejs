<!DOCTYPE html>
<html>
<head>
    <title></title>
    <!-- custom css -->
    <link rel="stylesheet" href="../lib/css/main.css">
    <!-- bootstrap css -->
    <link rel="stylesheet" href="../lib/bootstrap/dist/css/bootstrap.min.css">

    <!-- codemirror css -->
    <link rel="stylesheet" href="../lib/codemirror/lib/codemirror.css">
    <link rel="stylesheet" href="../lib/codemirror/addon/display/fullscreen.css">

    <!-- Themes files for code mirror -->

    <link rel="stylesheet" href="../lib/codemirror/theme/3024-day.css">
    <link rel="stylesheet" href="../lib/codemirror/theme/3024-night.css">
    <link rel="stylesheet" href="../lib/codemirror/theme/ambiance.css">
    <link rel="stylesheet" href="../lib/codemirror/theme/elegant.css">
    <link rel="stylesheet" href="../lib/codemirror/theme/ttcn.css">



</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-sm-10">
                <h3>gluEdit</h3>
            </div>

            <div class="col-sm-2">
                <br/>
                <select class="form-control" onchange="selectTheme()" id="theme">
                  <option selected>default</option>
                  <option>3024-day</option>
                  <option>3024-night</option>
                  <option>ambiance</option>
                  <option>elegane</option>
                  <option>ttcn</option>
                </select>
            </div>
        </div>

        <div class="row">
          <div class="col-md-9">
            <p id="editor_name">Editor Name : </p>
            <p id="user_name">User Name : </p>
            <p id="share_url">Share URL: </p>

            <textarea class="form-control" id="id_content"   name="content" >default text</textarea>
          </div>
          <div class="col-md-3">
            <div id="user_list">
              <h3> User List </h3>
              <ul></ul>
            </div>
            <div>
              <ul id="message">
                <li class="system">
                  <span class='text'> Chat box initialized </span>
                </li>

              </ul>
              <div>
                <div class="msj-rta macro" style="margin:auto">
                    <div class="text text-r" style="background:whitesmoke !important">
                      <input id="inputMessage" placeholder="Type a message"/>
                    </div>
                  </div>
                </div>
            </div>

          </div>
        </div>
    </div>
</body>
</html>

<!-- jquery and bootstrap script -->
<script src="../lib/jquery/dist/jquery.min.js"></script>
<script src="../lib/bootstrap/dist/js/bootstrap.min.js"></script>

<!-- code mirror scripts -->
<script src="../lib/codemirror/lib/codemirror.js"></script>
<script src="../lib/codemirror/mode/javascript/javascript.js"></script>

<script src="../lib/codemirror/addon/selection/active-line.js"></script>
<script src="../lib/codemirror/addon/edit/matchbrackets.js"></script>

<!-- socket io script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>

<!-- Share JS FILES -->
<script src="../lib/webclient/bcsocket.js"></script>
<script src="../lib/webclient/share.uncompressed.js"></script>
<script src="../lib/webclient/textarea.js"></script>
<script src="../lib/webclient/cm.js"></script>




<script>
var doc = null, editor = null;

window.onload = function() {
    data = JSON.parse(`<%- data%>`);
    const {
        editorObject,
        userName,
        users
    } = data;
    console.log(editorObject, userName, users);
    let editorName = editorObject.editorName;

    showEditorName(editorName);
    showUserName(userName);
    showUsers(users);
    showShareUrl(editorName);
    addMessage(`${userName} has joined the editor`);

    var options = {
        origin: "http://localhost:8000/channel"
    }

    let textElement = document.getElementById("id_content");
    let settings = {
        lineNumbers: true,
        mode:"javascript",
        styleActiveLine: true,
        matchBrackets: true,
        lineWrapping: true,
        extraKeys: {"Ctrl-Space": "autocomplete"},
        extraKeys: {
            "F11": function(cm) {
                cm.setOption("fullScreen", !cm.getOption("fullScreen"));
            },

            "Esc": function(cm) {
                if (cm.getOption("fullScreen")) {
                    cm.setOption("fullScreen", false);
                }
            }
        }
    };
    editor = CodeMirror.fromTextArea(textElement, settings);
    editor.setSize(800, 800);
    editor.getOption("fullScreen");

    sharejs.open(editorObject.editorName, 'text', options, (error, doc) => {
        if (error) {
            console.log(error);
        }
        doc.attach_cm(editor);
    });


    const socket = io.connect("http://localhost:8000");
    socket.on("connect",  () => {
        console.log("Connected!");
        let joinObject = {
            editorName : editorName,
            userName: userName
        };

        // let the server know that a user has joined
        socket.emit('join', joinObject);

        // add user join msg to chat box
        socket.on('userJoin', (userName)=>{
            let message = `${userName} has joined the editor`;
            console.log(message);
            userJoin(userName);
            addMessage(message);
        });

        // add user left msg to chat box
        socket.on('userLeft', (userName)=>{
            let message = `${userName} has left the editor`; 
            console.log(message);
            userLeft(userName);
            addMessage(message);
        });

        // add message to chat box
        socket.on('message', (data)=>{
            console.log(data);
            let {message, userName} = data;
            addMessage(message, userName);
        });

        let messageObject = document.getElementById('inputMessage');
        messageObject.addEventListener('keydown', (event)=>{
            let message = messageObject.value;
            if (event.keyCode == 13) {
                socket.emit('message', {
                    userName : userName,
                    editorName : editorName,
                    message : messageObject.value
                });
                addMessage(message, userName);
                messageObject.value = "";
            }
        });
    });
}

function showEditorName(editorName) {
    let elem = document.getElementById("editor_name");
    elem.innerHTML += editorName;
}

function showUserName(userName) {
    let elem = document.getElementById("user_name");
    elem.innerHTML += userName;
}

function showUsers(users) {
    const elem = $("#user_list > ul");
    users.forEach((user)=>{
    elem.append(`<li id="${user}"> ${user} </li>`);
    });
}

function showShareUrl(editorName) {
    let elem = document.getElementById("share_url");
    elem.innerHTML += window.location.href;
}


function userJoin(userName) {
    $("#user_list > ul").append(`<li id="${userName}"> ${userName} </li> `);
}

function userLeft(userName) {
    $(`#${userName}`).remove();
}

function selectTheme() {
    var input = document.getElementById("theme");
    var theme = input.options[input.selectedIndex].textContent;
    editor.setOption("theme", theme);
}

function addMessage(message, userName) {
    if (userName === undefined) {
        $('#message').append(
            `<li class="system">
                <span class='text'>${message}</span>
            </li>`);
    } else {
        $('#message').append(
            `<li>
                <span class='uid'>${userName}</span>
                <span class='text'> ${message} </span>
            </li>`);
    }
}


</script>

<script>

</script>