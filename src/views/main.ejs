<!DOCTYPE html>
<html>
<head>
    <title></title>
    <!-- custom css -->
    <link rel="stylesheet" href="../lib/css/main.css">
    <!-- bootstrap css -->
    <link rel="stylesheet" href="../lib/bootstrap/dist/css/bootstrap.min.css">

    <!-- codemirror css -->
    <link rel="stylesheet" href="../lib/codemirror/lib/codemirror.css">
    <link rel="stylesheet" href="../lib/codemirror/addon/display/fullscreen.css">

    <!-- Themes files for code mirror -->

    <link rel="stylesheet" href="../lib/codemirror/theme/3024-day.css">
    <link rel="stylesheet" href="../lib/codemirror/theme/3024-night.css">
    <link rel="stylesheet" href="../lib/codemirror/theme/ambiance.css">
    <link rel="stylesheet" href="../lib/codemirror/theme/elegant.css">
    <link rel="stylesheet" href="../lib/codemirror/theme/ttcn.css">
    



</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-sm-10">
                <h3>gluEdit</h3>
            </div>

            <div class="col-sm-2">
                <br/>
                <select class="form-control" onchange="selectTheme()" id="theme">
                  <option selected>default</option>
                  <option>3024-day</option>
                  <option>3024-night</option>
                  <option>ambiance</option>
                  <option>elegane</option>
                  <option>ttcn</option>
                </select>
            </div>
        </div>

        <div class="row">
          <div class="col-md-9">
            <p id="editor_name">Editor Name : </p>
            <p id="user_name">User Name : </p>
            <p id="share_url">Share URL: </p>

            <textarea class="form-control" id="id_content"   name="content" >default text</textarea>
          </div>
          <div class="col-md-3">
            <div id="user_list">
              <h3> User List </h3>
              <ul></ul>
            </div>
            <div>
              <ul id="message">
                <li class="system">
                  <span class='text'> Chat box initialized </span>
                </li>

              </ul>
              <div>
                <div class="msj-rta macro" style="margin:auto">
                    <div class="text text-r" style="background:whitesmoke !important">
                      <input id="inputMessage" placeholder="Type a message"/>
                    </div>
                  </div>
                </div>
            </div>

          </div>
        </div>
    </div>
</body>
</html>

<!-- jquery and bootstrap script -->
<script src="../lib/jquery/dist/jquery.min.js"></script>
<script src="../lib/bootstrap/dist/js/bootstrap.min.js"></script>

<!-- code mirror scripts -->
<script src="../lib/codemirror/lib/codemirror.js"></script>
<script src="../lib/codemirror/mode/javascript/javascript.js"></script>

<script src="../lib/codemirror/addon/selection/active-line.js"></script>

<!-- socket io script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>

<!-- Share JS FILES -->
<script src="../lib/webclient/bcsocket.js"></script>
<script src="../lib/webclient/share.uncompressed.js"></script>
<script src="../lib/webclient/textarea.js"></script>
<script src="../lib/webclient/cm.js"></script>

<script src="../lib/logoot.js"></script>




<script>
var editor = null;
// var siteNumber = Math.floor(Math.random() * 100)

window.onload = function() {
    let data = <%- data%>;
    const {
        editorObject,
        userName,
        siteNumber
    } = data;
    console.log(editorObject, userName);
    const editorName = editorObject.editorName;
    const charMap = editorObject.charMap;


    showEditorName(editorName);
    showUserName(userName);
    showUsers(editorName);
    showShareUrl(editorName);
    addMessage(`${userName} has joined the editor`);

    let textElement = document.getElementById("id_content");
    let settings = {
        lineNumbers: true,
        mode:"javascript",
        styleActiveLine: true,
        lineWrapping: true,
        extraKeys: {"Ctrl-Space": "autocomplete"},
        extraKeys: {
            "F11": function(cm) {
                cm.setOption("fullScreen", !cm.getOption("fullScreen"));
            },

            "Esc": function(cm) {
                if (cm.getOption("fullScreen")) {
                    cm.setOption("fullScreen", false);
                }
            }
        }
    };
    editor = CodeMirror.fromTextArea(textElement, settings);
    editor.setSize(800, 800);
    editor.getOption("fullScreen");
    addTextToCodeMirror(editor, charMap);


    // let options = {
    //     origin: "http://localhost:8000/channel"
    // }
    // sharejs.open(editorObject.editorName, 'text', options, (error, doc) => {
    //     if (error) {
    //         console.log(error);
    //     }
    //     doc.attach_cm(editor);
    // });


    const socket = io.connect("http://localhost:8000");
    socket.on("connect",  () => {
        console.log("Connected!");
        let joinObject = {
            editorName : editorName,
            userName: userName
        };

        // let the server know that a user has joined
        socket.emit('join', joinObject);

        // add user join msg to chat box
        socket.on('userJoin', (userName)=>{
            let message = `${userName} has joined the editor`;
            console.log(message);
            userJoin(userName);
            addMessage(message);
        });

        // add user left msg to chat box
        socket.on('userLeft', (userName)=>{
            let message = `${userName} has left the editor`; 
            console.log(message);
            userLeft(userName);
            addMessage(message);
        });

        // add message to chat box
        socket.on('message', (data)=>{
            console.log(data);
            let {message, userName} = data;
            addMessage(message, userName);
        });

        socket.on('change', (data)=>{
            let type = data.type;
            let charObj = data.charObj;
            if (type === 'insert') {
                insertRemoteChar(charObj, charMap);
            }
            if (type === 'delete') {
                deleteRemoteChar(charObj, charMap);
            }
        })

        editor.on('change', (ed, data) =>{
            // console.log(data);
            let posFrom = data.from;
            let posTo = data.to;
            let index = editor.indexFromPos(posFrom);
            let indexTo = editor.indexFromPos(posTo);
            // console.log(index, indexTo);
            let ch = data.text[0];
            let ch2 = data.text[1];
            if (data.origin === '+input') {
                // code mirror check for new line
                if (ch === "" && ch2 === "" ) {
                    return localInsertChar('\n', index, socket, editorName,charMap, siteNumber);
                }
                localInsertChar(ch, index, socket, editorName, charMap, siteNumber); 
            }
            if (data.origin === '+delete' && data.removed[0].length === 1)  {
                return localDeleteChar(ch, index, socket, editorName, charMap);
            }

            if ( data.origin === '+delete' && data.removed[0] === '' && data.removed[1] === '') {
                return localDeleteChar('\n', index, socket, editorName, charMap); 
            }
        });

        let messageObject = document.getElementById('inputMessage');
        messageObject.addEventListener('keydown', (event)=>{
            let message = messageObject.value;
            if (event.keyCode == 13) {
                socket.emit('message', {
                    userName : userName,
                    editorName : editorName,
                    message : messageObject.value
                });
                addMessage(message, userName);
                messageObject.value = "";
            }
        });
    });
}

function showEditorName(editorName) {
    let elem = document.getElementById("editor_name");
    elem.innerHTML += editorName;
}

function showUserName(userName) {
    let elem = document.getElementById("user_name");
    elem.innerHTML += userName;
}

function showUsers(editorName) {
    $.ajax({
        type: 'GET',
        url : 'http://' + location.hostname + ':' + location.port + '/users/' + editorName,
        dataType: 'json',
        success: function(data) {
            let users = data.users;
            const elem = $("#user_list > ul");
            users.forEach((user)=>{
                elem.append(`<li id="${user}"> ${user} </li>`);
            });
        },
        error: function(data) {
            console.log(data);
        }
    })
}

function showShareUrl(editorName) {
    let elem = document.getElementById("share_url");
    elem.innerHTML += window.location.href;
}


function userJoin(userName) {
    $("#user_list > ul").append(`<li id="${userName}"> ${userName} </li> `);
}

function userLeft(userName) {
    $(`#${userName}`).remove();
}

function selectTheme() {
    var input = document.getElementById("theme");
    var theme = input.options[input.selectedIndex].textContent;
    editor.setOption("theme", theme);
}

function addMessage(message, userName) {
    if (userName === undefined) {
        $('#message').append(
            `<li class="system">
                <span class='text'>${message}</span>
            </li>`);
    } else {
        $('#message').append(
            `<li>
                <span class='uid'>${userName}</span>
                <span class='text'> ${message} </span>
            </li>`);
    }
}
function addTextToCodeMirror(editor, charMap) {
    let textArr = charMap.map((obj)=>{
        return obj.value;
    });
    editor.setValue(textArr.join(''));
}

</script>

<script>

// inserting character ch at the index cursor postion.
function localInsertChar(ch, index, socket, editorName, charMap, siteNumber) {
    console.log('Local Insert', ch, index, JSON.stringify(charMap));
    let charObj = {};
    if (index === 0 && charMap[index] === undefined) {
        console.log('Document begin');
        let beginPosition = [{
            site : siteNumber, 
            digit : 1
        }];
        charObj = {
            value : ch, 
            position : beginPosition
        };
        charMap[index] = charObj
    } 
    //inserting new characters
    else if (charMap[index] === undefined ) {
        console.log('Insert at last');
        let nextDigit = charMap[charMap.length - 1].position[0].digit +1; 
        if (ch === '\n') {
            charObj = {
                value : ch, 
                position : [{
                    site : siteNumber, 
                    digit : nextDigit
                }]
            };            
        } else {
            let position1 = charMap[index-1].position;
            charObj = {
                value : ch, 
                position : generatePositionBetween(position1, [], siteNumber )
            };    
        }
        charMap[index] = charObj;
    } 
    else if (index === 0 && charMap[1] !== undefined ) {
        console.log('Insert in beginning'); 
        let position2 = charMap[1].position;
        charObj = {
            value : ch, 
            position : generatePositionBetween([], position2, siteNumber )
        }
        charMap.splice(parseInt(index), 0, charObj );
    }

    // inserting characters in b/w other characters
    else if (charMap[index] !== undefined ) {
        console.log('Insert in b/w');
        let position1 = charMap[index-1].position;
        let position2 = charMap[index].position;
        // console.log(position1, position2, siteNumber);
        charObj = {
            value : ch, 
            position : generatePositionBetween(position1, position2, siteNumber )
        };
        charMap.splice(parseInt(index), 0, charObj) ;
    } 
    // writing before the first 0th index. Beginning of document when 
    // 0th index is present
    
    
    console.log('Local Insert Finish', JSON.stringify(charMap));

    socket.emit('change', {
        type : 'insert', 
        editorName : editorName, 
        charObj : charObj
    });
} 

//delete character at the index cursor postion
function localDeleteChar(ch, index, socket, editorName, charMap) {
    socket.emit('change', {
        type : 'delete', 
        editorName : editorName, 
        charObj : charMap[index]
    });
    charMap.splice(parseInt(index), 1);
    console.log(charMap);
}

function insertRemoteChar(charObj, charMap) {
    console.log('Remote Insert Start', charObj, JSON.stringify(charMap));
    let position = charObj.position;
    let ch = charObj.value;
    // insert when no characters are present
    
    if (charMap.length === 0 ) {
        charMap[0] = charObj;
        editor.replaceRange(ch, editor.posFromIndex(0));
        console.log('Remote insert at beginning');
        return;
    }
    // insert b/w    
    for (var index in charMap) {
        if (comparePosition(position, charMap[index].position) < 0) {
            // insert ch at index 
            console.log('Remote insert in b/w at :', index);
            editor.replaceRange(ch, editor.posFromIndex(index));
            charMap.splice(index, 0, charObj);
            return;
        }
    }
    //insert ch at last index
    charMap.push(charObj);
    editor.replaceRange(ch, editor.posFromIndex(charMap.length-1));
    console.log('Remote insert at last index at:', index);
    console.log('Remote insert Finish');
}

function deleteRemoteChar(charObj, charMap) {
    let position = charObj.position;
    let ch = charObj.value;
    
    for (let index in charMap) {
        if (comparePosition(position, charMap[index].position) === 0 &&
            charMap[index].value === ch ) {
            // delete ch at index
            let from = editor.posFromIndex(parseInt(index));
            let to = editor.posFromIndex(parseInt(index) + 1);
            // console.log(index, from, to);
            editor.replaceRange('', from, to);
            charMap.splice(parseInt(index), 1);
            console.log('Remote delete');
            return;
        }
    }
    console.error('Cant find delete character');
}
</script>